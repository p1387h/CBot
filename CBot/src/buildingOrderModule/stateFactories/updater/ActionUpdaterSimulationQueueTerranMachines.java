package buildingOrderModule.stateFactories.updater;

import java.util.HashSet;

import buildingOrderModule.buildActionManagers.BuildActionManager;
import buildingOrderModule.scoringDirector.ScoringDirector;
import buildingOrderModule.scoringDirector.ScoringDirectorTerranMachines;
import buildingOrderModule.simulator.ActionType;
import buildingOrderModule.stateFactories.actions.AvailableActionsSimulationQueueTerran;
import bwapi.UnitType;
import core.Core;
import javaGOAP.GoapAction;

/**
 * ActionUpdaterSimulationQueueTerranMachines.java --- Updater for updating a
 * {@link AvailableActionsSimulationQueueTerran} instance matching a
 * Terran-Machine configuration, therefore further specifying the basic
 * configuration generated by the superclass.
 * 
 * @author P H - 18.11.2017
 *
 */
public class ActionUpdaterSimulationQueueTerranMachines extends ActionUpdaterSimulationQueueTerranDefault {

	private static final int SECOND_ARMORY_FORBID_UNITL_SECONDS = 900;

	public ActionUpdaterSimulationQueueTerranMachines(BuildActionManager buildActionManager) {
		super(buildActionManager);
	}

	// -------------------- Functions

	@Override
	protected HashSet<ActionType> generateAllAvailableActionTypes(BuildActionManager manager) {
		HashSet<ActionType> availableActionTypes = super.generateAllAvailableActionTypes(manager);
		HashSet<GoapAction> availableActions = manager.getAvailableActions();

		for (GoapAction goapAction : availableActions) {
			try {
				ActionType actionType = (ActionType) goapAction;

				if (actionType.defineResultType().isUnitType()
						&& this.doesRequiredUnitExist(manager, actionType.defineResultType().getUnitType())
						&& this.doesRequiredTechExist(manager, actionType.defineResultType().getUnitType())) {
					switch (actionType.defineResultType().toString()) {

					// ----- Buildings:
					case "Terran_Armory":
						Integer playerArmoryCount = manager.getInformationStorage().getCurrentGameInformation()
								.getCurrentUnitCounts().getOrDefault(UnitType.Terran_Armory, 0);

						// A second Armory can be build when a specific number
						// of seconds has passed.
						if (!this.wasForwardedOrQueued(actionType) && playerArmoryCount < 2
								&& Core.getInstance().getGame().elapsedTime() >= SECOND_ARMORY_FORBID_UNITL_SECONDS) {
							availableActionTypes.add(actionType);
						}
						break;
					case "Terran_Academy":
						// Academies are not needed since the Bot will focus on
						// machine Units instead of Bio-ones.
						availableActionTypes.remove(actionType);
						break;
					}
				}
			}
			// Casting of action Queues and starting Queues: Conversion to
			// ActionType fails!
			catch (ClassCastException e) {
				// e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return availableActionTypes;
	}

	@Override
	protected ScoringDirector defineScoringDirector() {
		return new ScoringDirectorTerranMachines(this.buildActionManager);
	}

}
